#!/usr/bin/env node

require('dotenv').config();

// Assume production if not set
if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = 'production';
}

// Set Debugging up
if (!process.env.DEBUG) {
  process.env.DEBUG = '*:info,*:error';
}

// npm packages
const Promise = require('bluebird');
const multimatch = require('multimatch');
const sitemap = require('sitemap');
const fs = require('fs');
const path = require('path');
const yaml_config = require('node-yaml-config');

// Promisified
const readdir = Promise.promisify(fs.readdir);
const writeFile = Promise.promisify(fs.writeFile);

// Local packages
const { debug, info, error } = require('../modules/debugger')(
  'create-sitemap-index'
);

// Config
const config_path = path.join(__dirname, '..', 'config.yml');
const config = yaml_config.load(config_path);

// Add sitemap index
readdir(path.join(__dirname, '..', 'site'))
  .then((files) => {
    const sitemap_files = multimatch(files, 'sitemap*.xml')
      .reverse()
      .map((file) => `${config.site.url}/${file}`);
    debug('sitemap files: %o', sitemap_files);
    return writeFile(
      path.join(__dirname, '..', 'site', 'sitemap.xml'),
      sitemap.buildSitemapIndex({
        urls: sitemap_files
      })
    );
  })
  .then(() => info('Saved `sitemap.xml` index'))
  .catch((err) => {
    error('There was an issue creating `sitemap.xml`');
    throw err;
  });
