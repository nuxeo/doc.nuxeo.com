#!/usr/bin/env node
/* eslint no-console: 0 */

require('dotenv').config();
// Set debug level
process.env.DEBUG = process.env.DEBUG || '*:error,*:info';

const yaml = require('js-yaml');
const fs = require('fs');
const path = require('path');

const { debug, error } = require('../modules/debugger')('redirects-yml2nginx');
const shortlinks = require('../shortlinks.json');
const redirects_file = path.join(__dirname, '..', 'redirects.yml');

const formater = {
  redirect: (source, target, type) => {
    // add leading /
    if (!add_prefix_regex.test(target)) {
      target = `/${target}`;
    }

    // Escape spaces in source and target
    source = escape_spaces(source);
    target = escape_spaces(target);

    // Determine the redirect flag based on the type
    const redirectFlag = type === '[R=permanent,L]' ? '[R=permanent,L]' : '[R=302,L]';


    // Build output string
    return `RewriteRule ${source}\t${target}\t${redirectFlag}`;
  },
  reverse_proxy: (source, target) => `<Location ${source}>
    ProxyPass ${target}
    ProxyPassReverse ${target}
  </Location>`
};

const default_type = '[R=permanent,L]';

debug('shortlinks', Object.entries(shortlinks).slice(0, 100));

// Shortlinks
console.log(
  Object.entries(shortlinks)
    .map(([url, shortlink_arr]) =>
      shortlink_arr
        .map((shortlink) => `RewriteRule ^/n/${shortlink}/?$\t${url}\t[R=permanent,L]`)
        .join('\n')
    )
    .join('\n')
);

// Redirects
const add_prefix_regex = /^(\/|https?:\/\/)/;
const escape_spaces = (text) => text.replace(/ /g, '\\ ');
let redirects;

try {
  redirects = yaml.safeLoad(fs.readFileSync(redirects_file, 'utf8')) || {};
} catch (e) {
  redirects = {};
  throw new Error(`Failed to load: ${redirects_file}\n${e}`);
}

debug('redirects', Object.entries(redirects).slice(0, 100));

// Output to stdout
console.log(
  Object.entries(redirects)
    .map(([source, target_config = '/']) => {
      if (
        typeof target_config === 'string' ||
        target_config instanceof String
      ) {
        target_config = { target: target_config };
      }
      const { target, type = default_type } = target_config;
      const format_type = type === default_type ? 'redirect' : type;

      if (typeof formater[format_type] === 'function') {
        return formater[format_type](source, target, type);
      } else {
        error(`generator.${format_type} not found`);
        return null;
      }
    })
    .join('\n')
);
