#!/usr/bin/env node
'use strict';

// Assume production if not set
if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = 'production';
}

// Set Debugging up
if (!process.env.DEBUG) {
  process.env.DEBUG = '*:info,*:error';
}

// Debugging
const { debug, info, error } = require('../modules/debugger')('Algolia-Index');

// core packages
const path = require('path');

// npm packages
const algoliasearch = require('algoliasearch');
const yaml_config = require('node-yaml-config');
const chunk = require('lodash.chunk');

const config = yaml_config.load(path.join(__dirname, '..', 'config.yml'));
const batchSize = 500;

let local_data;

try {
  local_data = require('../algolia.json');
} catch (err) {
  error(
    'Reference `algolia.json` was not found - Algolia index will not be updated'
  );
}

const projectId = config.site.algolia_id;
const indexID = config.site.algolia_index;
const { ALGOLIA_KEY: algolia_key = '' } = process.env;

info('projectId', projectId);
info('algolia_key', algolia_key);
info('indexID', indexID);

if (local_data && algolia_key) {
  const algolia = algoliasearch(projectId, algolia_key);
  const index = algolia.initIndex(indexID);

  const getAllAlgoliaHashes = () =>
    new Promise((resolve, reject) => {
      const browser = index.browseAll('', { attributesToRetrieve: ['hash'] });
      let hits = [];

      browser.on('result', content => {
        hits = hits.concat(content.hits);
      });

      browser.on('end', () => {
        debug('hits', hits);
        debug('We got %d hits', hits.length);
        resolve(hits);
      });

      browser.on('error', err => {
        reject(err);
      });
    });

  const processChanges = algoliaValues => {
    const algoliaIDs = algoliaValues.map(({ objectID }) => objectID);

    // Default with missing entries
    const updateIDs = Object.entries(local_data)
      .filter(([objectID]) => !algoliaIDs.includes(objectID))
      .map(([, data]) => data);

    // Find removed entries
    const deleteIDs = algoliaValues
      .filter(({ objectID, hash }) => {
        const local = local_data[objectID];
        if (local) {
          if (local.hash !== hash) {
            // Add changed entries to be updated
            updateIDs.push(local);
          }
          return false;
        } else {
          // No local instance; remove index
          return true;
        }
      })
      .map(({ objectID }) => objectID);

    debug('updateIDs', updateIDs);
    debug('deleteIDs', deleteIDs);
    return Promise.resolve({ updateIDs, deleteIDs });
  };

  const deleteObjects = entryLists => {
    const { deleteIDs } = entryLists;
    if (deleteIDs && deleteIDs.length) {
      return new Promise((resolve, reject) => {
        info('Objects being removed:', deleteIDs.length);
        debug('deleteIDs', deleteIDs);
        index.deleteObjects(deleteIDs, err => {
          if (err) {
            reject(`error while removing objects: ${err}`);
          } else {
            resolve(entryLists);
          }
        });
      });
    } else {
      return Promise.resolve(entryLists);
    }
  };

  const updateObjects = entryLists => {
    const { updateIDs } = entryLists;
    if (updateIDs && updateIDs.length) {
      const updateEntries = chunk(updateIDs, batchSize).map(
        updateIDsBatch =>
          new Promise((resolve, reject) => {
            info('Objects being added/amended:', updateIDs.length);
            debug('updateIDs', updateIDsBatch);
            index.partialUpdateObjects(updateIDsBatch, err => {
              if (err) {
                reject(`error while updating objects: ${err}`);
              } else {
                resolve();
              }
            });
          })
      );

      return Promise.all(updateEntries);
    } else {
      return Promise.resolve();
    }
  };

  getAllAlgoliaHashes()
    .then(processChanges)
    .then(deleteObjects)
    .then(updateObjects)
    .catch(err => {
      error(err);
      process.exit(1);
    });
}
