#!/usr/bin/env node
'use strict';

// Assume production if not set
if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = 'production';
}

// Set Debugging up
if (!process.env.DEBUG) {
  process.env.DEBUG = '*:info,*:error';
}

// Debugging
const { debug, info, error } = require('../modules/debugger')('Algolia-Index');

// core packages
const path = require('path');

// npm packages
const algoliasearch = require('algoliasearch');
// const { detailedDiff: diff } = require('deep-object-diff');
const { diff } = require('deep-object-diff');
const Promise = require('bluebird');
const yaml_config = require('node-yaml-config');

const config = yaml_config.load(path.join(__dirname, '..', 'config.yml'));

let needsClearing = false;
let algolia_ref;

try {
  algolia_ref = require('../algolia-ref.json');
} catch (err) {
  error('Reference `algolia-ref.json` was not found');
  needsClearing = true;
  algolia_ref = {};
}
const algolia_data = require('../algolia.json');

// let { added, updated, deleted } = diff(algolia_ref, algolia_data);
let diffs = diff(algolia_ref, algolia_data);

const deleteIDs = Object.entries(diffs)
  .filter(([, data]) => data === void 0)
  .map(([objectID]) => objectID);
const updateIDs = Object.entries(diffs)
  .filter(([, data]) => data !== void 0)
  .map(([objectID, data]) => Object.assign({}, data, { objectID }));

// console.log('added', added);
// console.log('updated', Object.entries(updated).map(([objectID, data]) => Object.assign({}, data, { objectID })));
// console.log(
//   'concat',
//   Object.values(added).concat(Object.entries(updated).map(([objectID, data]) => Object.assign({}, data, { objectID })))
// );
// console.log('deleted', deleted);

const projectId = config.site.algolia_id;
const indexID = config.site.algolia_index;
const { ALGOLIA_KEY: algolia_key = '' } = process.env;

info('projectId', projectId);
info('algolia_key', algolia_key);
info('indexID', indexID);

if (algolia_key) {
  const algolia = algoliasearch(projectId, algolia_key);
  const index = algolia.initIndex(indexID);

  const clearIndex = () => {
    if (needsClearing) {
      return new Promise((resolve, reject) => {
        info('Index being cleared');
        index.clearIndex(err => {
          if (err) {
            reject(`Error while cleaning index: ${err}`);
          } else {
            resolve();
          }
        });
      });
    } else {
      return Promise.resolve();
    }
  };

  const deleteObjects = () => {
    if (deleteIDs && deleteIDs.length) {
      return new Promise((resolve, reject) => {
        info('Objects being removed');
        debug('deleteIDs', deleteIDs);
        index.deleteObjects(deleteIDs, err => {
          if (err) {
            reject(`error while removing objects: ${err}`);
          } else {
            resolve();
          }
        });
      });
    } else {
      return Promise.resolve();
    }
  };

  const updateObjects = () => {
    if (updateIDs && updateIDs.length) {
      return new Promise((resolve, reject) => {
        info('Objects being added/amended');
        debug('updateIDs', updateIDs);
        index.partialUpdateObjects(updateIDs, err => {
          if (err) {
            reject(`error while removing objects: ${err}`);
          } else {
            resolve();
          }
        });
      });
    } else {
      return Promise.resolve();
    }
  };

  clearIndex()
    .then(deleteObjects)
    .then(updateObjects)
    .catch(err => {
      throw new Error(err);
    });
}
